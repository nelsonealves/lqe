SOCKET(2)                  Linux Programmer's Manual                 SOCKET(2)



NNAAMMEE
       socket - create an endpoint for communication

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>          /* See NOTES */
       ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>

       iinntt ssoocckkeett((iinntt _d_o_m_a_i_n,, iinntt _t_y_p_e,, iinntt _p_r_o_t_o_c_o_l));;

DDEESSCCRRIIPPTTIIOONN
       ssoocckkeett()  creates  an endpoint for communication and returns a descrip‐
       tor.

       The _d_o_m_a_i_n argument specifies a communication domain; this selects  the
       protocol  family  which will be used for communication.  These families
       are  defined  in  _<_s_y_s_/_s_o_c_k_e_t_._h_>.   The  currently  understood  formats
       include:

       Name                Purpose                          Man page
       AAFF__UUNNIIXX, AAFF__LLOOCCAALL   Local communication              uunniixx(7)
       AAFF__IINNEETT             IPv4 Internet protocols          iipp(7)
       AAFF__IINNEETT66            IPv6 Internet protocols          iippvv66(7)
       AAFF__IIPPXX              IPX - Novell protocols
       AAFF__NNEETTLLIINNKK          Kernel user interface device     nneettlliinnkk(7)
       AAFF__XX2255              ITU-T X.25 / ISO-8208 protocol   xx2255(7)
       AAFF__AAXX2255             Amateur radio AX.25 protocol
       AAFF__AATTMMPPVVCC           Access to raw ATM PVCs
       AAFF__AAPPPPLLEETTAALLKK        Appletalk                        ddddpp(7)
       AAFF__PPAACCKKEETT           Low level packet interface       ppaacckkeett(7)

       The  socket  has  the indicated _t_y_p_e, which specifies the communication
       semantics.  Currently defined types are:

       SSOOCCKK__SSTTRREEAAMM     Provides sequenced, reliable, two-way, connection-based
                       byte  streams.  An out-of-band data transmission mecha‐
                       nism may be supported.

       SSOOCCKK__DDGGRRAAMM      Supports datagrams (connectionless, unreliable messages
                       of a fixed maximum length).

       SSOOCCKK__SSEEQQPPAACCKKEETT  Provides  a  sequenced,  reliable,  two-way connection-
                       based data transmission path  for  datagrams  of  fixed
                       maximum  length;  a  consumer  is  required  to read an
                       entire packet with each input system call.

       SSOOCCKK__RRAAWW        Provides raw network protocol access.

       SSOOCCKK__RRDDMM        Provides a reliable datagram layer that does not  guar‐
                       antee ordering.

       SSOOCCKK__PPAACCKKEETT     Obsolete  and  should  not be used in new programs; see
                       ppaacckkeett(7).

       Some socket types may not be implemented by all protocol families;  for
       example, SSOOCCKK__SSEEQQPPAACCKKEETT is not implemented for AAFF__IINNEETT.

       Since Linux 2.6.27, the _t_y_p_e argument serves a second purpose: in addi‐
       tion to specifying a socket type, it may include the bitwise OR of  any
       of the following values, to modify the behavior of ssoocckkeett():

       SSOOCCKK__NNOONNBBLLOOCCKK   Set  the  OO__NNOONNBBLLOOCCKK  file  status flag on the new open
                       file description.  Using this flag saves extra calls to
                       ffccnnttll(2) to achieve the same result.

       SSOOCCKK__CCLLOOEEXXEECC    Set the close-on-exec (FFDD__CCLLOOEEXXEECC) flag on the new file
                       descriptor.  See the description of the OO__CCLLOOEEXXEECC  flag
                       in ooppeenn(2) for reasons why this may be useful.

       The  _p_r_o_t_o_c_o_l  specifies  a  particular  protocol  to  be used with the
       socket.  Normally only a single protocol exists to support a particular
       socket  type within a given protocol family, in which case _p_r_o_t_o_c_o_l can
       be specified as 0.  However, it is possible  that  many  protocols  may
       exist,  in  which  case a particular protocol must be specified in this
       manner.  The protocol number to use is specific to  the  “communication
       domain” in which communication is to take place; see pprroottooccoollss(5).  See
       ggeettpprroottooeenntt(3) on how to map protocol name strings to protocol numbers.

       Sockets of type SSOOCCKK__SSTTRREEAAMM are full-duplex byte  streams,  similar  to
       pipes.   They  do not preserve record boundaries.  A stream socket must
       be in a _c_o_n_n_e_c_t_e_d state before any data may be sent or received on  it.
       A connection to another socket is created with a ccoonnnneecctt(2) call.  Once
       connected, data may be transferred using rreeaadd(2) and wwrriittee(2) calls  or
       some variant of the sseenndd(2) and rreeccvv(2) calls.  When a session has been
       completed a cclloossee(2) may be performed.  Out-of-band data  may  also  be
       transmitted  as  described  in  sseenndd(2)  and  received  as described in
       rreeccvv(2).

       The communications protocols which implement a SSOOCCKK__SSTTRREEAAMM ensure  that
       data  is not lost or duplicated.  If a piece of data for which the peer
       protocol has buffer space cannot be successfully transmitted  within  a
       reasonable  length  of  time,  then  the connection is considered to be
       dead.  When SSOO__KKEEEEPPAALLIIVVEE is enabled on the socket the  protocol  checks
       in  a protocol-specific manner if the other end is still alive.  A SSIIGG‐‐
       PPIIPPEE signal is raised if a  process  sends  or  receives  on  a  broken
       stream; this causes naive processes, which do not handle the signal, to
       exit.   SSOOCCKK__SSEEQQPPAACCKKEETT  sockets  employ  the  same  system   calls   as
       SSOOCCKK__SSTTRREEAAMM  sockets.   The  only difference is that rreeaadd(2) calls will
       return only the amount of data requested, and any data remaining in the
       arriving  packet  will  be  discarded.   Also all message boundaries in
       incoming datagrams are preserved.

       SSOOCCKK__DDGGRRAAMM and SSOOCCKK__RRAAWW sockets allow sending of  datagrams  to  corre‐
       spondents  named  in sseennddttoo(2) calls.  Datagrams are generally received
       with rreeccvvffrroomm(2), which  returns  the  next  datagram  along  with  the
       address of its sender.

       SSOOCCKK__PPAACCKKEETT  is an obsolete socket type to receive raw packets directly
       from the device driver.  Use ppaacckkeett(7) instead.

       An ffccnnttll(2) FF__SSEETTOOWWNN operation can be used  to  specify  a  process  or
       process  group  to  receive  a  SSIIGGUURRGG signal when the out-of-band data
       arrives or SSIIGGPPIIPPEE signal when a SSOOCCKK__SSTTRREEAAMM  connection  breaks  unex‐
       pectedly.   This  operation  may  also  be  used  to set the process or
       process group that receives the I/O and  asynchronous  notification  of
       I/O events via SSIIGGIIOO.  Using FF__SSEETTOOWWNN is equivalent to an iiooccttll(2) call
       with the FFIIOOSSEETTOOWWNN or SSIIOOCCSSPPGGRRPP argument.

       When the network signals an error  condition  to  the  protocol  module
       (e.g.,  using  a ICMP message for IP) the pending error flag is set for
       the socket.  The next operation on this socket will  return  the  error
       code of the pending error.  For some protocols it is possible to enable
       a per-socket error queue to retrieve  detailed  information  about  the
       error; see IIPP__RREECCVVEERRRR in iipp(7).

       The  operation of sockets is controlled by socket level _o_p_t_i_o_n_s.  These
       options are defined in _<_s_y_s_/_s_o_c_k_e_t_._h_>.  The functions sseettssoocckkoopptt(2) and
       ggeettssoocckkoopptt(2) are used to set and get options, respectively.

RREETTUURRNN VVAALLUUEE
       On  success,  a  file  descriptor  for  the new socket is returned.  On
       error, -1 is returned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       EEAACCCCEESS Permission to create a socket of the specified type and/or  pro‐
              tocol is denied.

       EEAAFFNNOOSSUUPPPPOORRTT
              The  implementation  does not support the specified address fam‐
              ily.

       EEIINNVVAALL Unknown protocol, or protocol family not available.

       EEIINNVVAALL Invalid flags in _t_y_p_e.

       EEMMFFIILLEE Process file table overflow.

       EENNFFIILLEE The system limit on the total number  of  open  files  has  been
              reached.

       EENNOOBBUUFFSS or EENNOOMMEEMM
              Insufficient  memory is available.  The socket cannot be created
              until sufficient resources are freed.

       EEPPRROOTTOONNOOSSUUPPPPOORRTT
              The protocol type or the specified  protocol  is  not  supported
              within this domain.

       Other errors may be generated by the underlying protocol modules.

CCOONNFFOORRMMIINNGG TTOO
       4.4BSD, POSIX.1-2001.

       The SSOOCCKK__NNOONNBBLLOOCCKK and SSOOCCKK__CCLLOOEEXXEECC flags are Linux-specific.

       ssoocckkeett()  appeared in 4.2BSD.  It is generally portable to/from non-BSD
       systems supporting clones of the BSD socket layer (including  System  V
       variants).

NNOOTTEESS
       POSIX.1-2001  does not require the inclusion of _<_s_y_s_/_t_y_p_e_s_._h_>, and this
       header file is not required on Linux.  However, some  historical  (BSD)
       implementations  required  this  header file, and portable applications
       are probably wise to include it.

       The manifest constants used under 4.x BSD  for  protocol  families  are
       PPFF__UUNNIIXX, PPFF__IINNEETT, and so on, while AAFF__UUNNIIXX, AAFF__IINNEETT, and so on are used
       for address families.  However, already the BSD man page promises: "The
       protocol  family generally is the same as the address family", and sub‐
       sequent standards use AF_* everywhere.

EEXXAAMMPPLLEE
       An example of the use of ssoocckkeett() is shown in ggeettaaddddrriinnffoo(3).

SSEEEE AALLSSOO
       aacccceepptt(2),  bbiinndd(2),  ccoonnnneecctt(2),  ffccnnttll(2),  ggeettppeeeerrnnaammee(2),  ggeettssoocckk‐‐
       nnaammee(2),   ggeettssoocckkoopptt(2),   iiooccttll(2),   lliisstteenn(2),   rreeaadd(2),  rreeccvv(2),
       sseelleecctt(2),  sseenndd(2),  sshhuuttddoowwnn(2),  ssoocckkeettppaaiirr(2),  wwrriittee(2),   ggeettpprroo‐‐
       ttooeenntt(3), iipp(7), ssoocckkeett(7), ttccpp(7), uuddpp(7), uunniixx(7)

       “An  Introductory  4.3BSD Interprocess Communication Tutorial” and “BSD
       Interprocess Communication Tutorial”, reprinted  in  _U_N_I_X  _P_r_o_g_r_a_m_m_e_r_'_s
       _S_u_p_p_l_e_m_e_n_t_a_r_y _D_o_c_u_m_e_n_t_s _V_o_l_u_m_e _1_.

CCOOLLOOPPHHOONN
       This  page  is  part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, and information about reporting  bugs,  can
       be found at http://www.kernel.org/doc/man-pages/.



Linux                             2009-01-19                         SOCKET(2)
